---
Relative Path: ./index.html
---
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <link rel="stylesheet" href="css/styles.css">
    <title>Webcam Yoyo App</title>
</head>
<body>
    <div class="app-container">
        <div class="video-container" id="video-container">
            <div id="youtube-player-container">
                <div id="youtube-player"></div>
            </div>
            <div id="webcam-container">
                <video id="webcam-feed" autoplay></video>
            </div>
        </div>
        <div class="controls">
            <div class="video-controls">
                <button onclick="playVideo()">Play</button>
                <button onclick="pauseVideo()">Pause</button>
                <button onclick="stopVideo()">Stop</button>
                <input type="text" id="video-id-input" placeholder="Enter YouTube Video ID">
                <button onclick="loadNewVideo()">Load Video</button>
                <button onclick="toggleFullscreen()">Fullscreen</button>
            </div>
            <div class="webcam-controls">
                <button onclick="toggleMirror()">Mirror Webcam</button>
                <label for="opacity-control">Opacity:</label>
                <input type="range" id="opacity-control" min="0" max="1" step="0.1" value="0.5" onchange="changeOpacity()">
                <span id="opacity-value">50%</span>
            </div>
            <div class="scale-controls">
                <label for="youtube-scale">YouTube Scale:</label>
                <input type="range" id="youtube-scale" min="0.5" max="2" step="0.1" value="1" onchange="changeYouTubeScale()">
                <span id="youtube-scale-value">100%</span>
                <label for="webcam-scale">Webcam Scale:</label>
                <input type="range" id="webcam-scale" min="0.5" max="2" step="0.1" value="1" onchange="changeWebcamScale()">
                <span id="webcam-scale-value">100%</span>
            </div>
            <div class="playback-controls">
                <label for="playback-speed">Playback Speed:</label>
                <input type="range" id="playback-speed" min="0.25" max="2" step="0.25" value="1" onchange="changePlaybackSpeed()">
                <span id="speed-value">1x</span>
            </div>
        </div>
    </div>
    <script src="https://www.youtube.com/iframe_api"></script>
    <script src="js/script.js"></script>
</body>
</html>

---
Relative Path: ./README.md
---
# Webcam Yoyo App

## Project Description
This project is a webcam application that allows users to overlay their webcam feed on a YouTube video to practice yoyo tricks. The app provides features such as webcam mirroring, video playback controls, and resizing capabilities. Users can adjust the position and size of their webcam feed over the YouTube video, enabling them to compare their hand positions with the yoyo tricks demonstrated in the video.

## Key Features
- YouTube video embedding with playback controls
- Webcam feed overlay
- Mirroring toggle for webcam feed
- Adjustable webcam feed size and position
- Video playback speed control
- Frame-by-frame navigation
- Cross-device compatibility (including iPads)

## Milestones
1. **Project Setup**
   - Create necessary folders and initial files
   - Set up version control (Git)

2. **Basic Structure Implementation**
   - Implement HTML structure
   - Create responsive CSS layout
   - Set up JavaScript file with basic functionality

3. **YouTube Video Integration**
   - Integrate YouTube Player API
   - Implement video loading and basic playback controls

4. **Webcam Access and Overlay**
   - Implement webcam access using WebRTC
   - Create overlay of webcam feed on YouTube video

5. **Advanced Video Controls**
   - Add play, pause, and stop functionality
   - Implement playback speed control
   - Add frame-by-frame navigation

6. **Webcam Feed Manipulation**
   - Implement mirroring toggle for webcam feed
   - Add resize functionality for webcam feed
   - Enable drag-and-drop repositioning of webcam feed

7. **User Interface Enhancement**
   - Design and implement an intuitive UI for all controls
   - Ensure responsive design for various screen sizes

8. **Cross-device Compatibility**
   - Test and optimize for different browsers
   - Ensure functionality on tablets, especially iPads
   - Implement touch-friendly controls for mobile devices

9. **Performance Optimization**
   - Optimize code for smooth performance
   - Implement lazy loading and other performance best practices

10. **Testing and Debugging**
    - Conduct thorough testing on various devices and browsers
    - Debug any issues that arise during testing

11. **Documentation and Deployment**
    - Complete project documentation
    - Deploy the application to a web hosting platform
    - Prepare user guide or instructions for using the app



---
Relative Path: ./css/styles.css
---
body {
    font-family: Arial, sans-serif;
    display: flex;
    justify-content: center;
    align-items: center;
    height: 100vh;
    margin: 0;
    background-color: #f0f0f0;
}

.app-container {
    display: flex;
    flex-direction: column;
    align-items: center;
    background-color: white;
    padding: 20px;
    border-radius: 10px;
    box-shadow: 0 0 10px rgba(0,0,0,0.1);
    max-width: 95vw;
}

.video-container {
    position: relative;
    width: 1280px;
    height: 720px;
    margin-bottom: 20px;
    overflow: hidden;
}

#youtube-player-container {
    position: absolute;
    top: 0;
    left: 0;
    width: 100%;
    height: 100%;
    z-index: 1;
}

#youtube-player {
    width: 100%;
    height: 100%;
}

#webcam-container {
    position: absolute;
    top: 0;
    left: 0;
    width: 100%;
    height: 100%;
    z-index: 2;
    pointer-events: none;
}

#webcam-feed {
    position: absolute;
    top: 0;
    left: 0;
    width: 320px;
    height: 180px;
    object-fit: cover;
    border: 2px solid #333;
    border-radius: 5px;
    cursor: move;
    pointer-events: auto;
}

.controls {
    display: flex;
    flex-direction: column;
    align-items: center;
    width: 100%;
}

.video-controls, .webcam-controls, .scale-controls, .playback-controls {
    margin-bottom: 10px;
    display: flex;
    align-items: center;
    flex-wrap: wrap;
    justify-content: center;
}

button {
    padding: 8px 16px;
    margin: 0 5px;
    background-color: #4CAF50;
    color: white;
    border: none;
    border-radius: 4px;
    cursor: pointer;
    transition: background-color 0.3s;
}

button:hover {
    background-color: #45a049;
}

input[type="text"] {
    padding: 8px;
    margin: 0 5px;
    border: 1px solid #ddd;
    border-radius: 4px;
}

input[type="range"] {
    width: 150px;
    margin: 0 10px;
}

label, span {
    margin: 0 5px;
}

.app-container.fullscreen {
    position: fixed;
    top: 0;
    left: 0;
    width: 100vw;
    height: 100vh;
    max-width: 100vw;
    padding: 0;
    border-radius: 0;
    background-color: black;
}

.app-container.fullscreen .video-container {
    width: 100vw;
    height: calc(100vh - 150px);
    margin-bottom: 0;
}

.app-container.fullscreen .controls {
    position: absolute;
    bottom: 0;
    left: 0;
    width: 100%;
    background-color: rgba(0, 0, 0, 0.7);
    padding: 10px 0;
}

@media (max-width: 1280px) {
    .video-container {
        width: 90vw;
        height: calc(90vw * 9 / 16);
    }
}

@media (max-width: 768px) {
    .controls {
        flex-direction: column;
    }

    button, input[type="text"], input[type="range"] {
        margin: 5px 0;
    }
}

---
Relative Path: ./js/script.js
---
let player;
let isMirrored = false;
let isDragging = false;
let startX, startY, startLeft, startTop;
let isFullscreen = false;

function onYouTubeIframeAPIReady() {
    player = new YT.Player('youtube-player', {
        height: '720',
        width: '1280',
        videoId: 'dQw4w9WgXcQ', // Example video ID
        playerVars: {'autoplay': 0, 'controls': 1},
        events: {
            'onReady': onPlayerReady
        }
    });
}

function onPlayerReady(event) {
    console.log('YouTube player is ready');
    setupWebcamDragging();
    initializeWebcam();
}

function setupWebcamDragging() {
    const webcamFeed = document.getElementById('webcam-feed');
    
    webcamFeed.addEventListener('mousedown', startDragging);
    document.addEventListener('mousemove', drag);
    document.addEventListener('mouseup', stopDragging);
    
    // Touch events for mobile devices
    webcamFeed.addEventListener('touchstart', startDragging);
    document.addEventListener('touchmove', drag);
    document.addEventListener('touchend', stopDragging);
}

function startDragging(e) {
    isDragging = true;
    const webcamFeed = document.getElementById('webcam-feed');
    
    if (e.type === 'touchstart') {
        startX = e.touches[0].clientX;
        startY = e.touches[0].clientY;
    } else {
        startX = e.clientX;
        startY = e.clientY;
    }
    
    startLeft = parseInt(webcamFeed.style.left) || 0;
    startTop = parseInt(webcamFeed.style.top) || 0;
    
    e.preventDefault();
}

function drag(e) {
    if (!isDragging) return;
    
    const webcamFeed = document.getElementById('webcam-feed');
    const videoContainer = document.querySelector('.video-container');
    let clientX, clientY;
    
    if (e.type === 'touchmove') {
        clientX = e.touches[0].clientX;
        clientY = e.touches[0].clientY;
    } else {
        clientX = e.clientX;
        clientY = e.clientY;
    }
    
    let newLeft = startLeft + clientX - startX;
    let newTop = startTop + clientY - startY;
    
    // Constrain within video container
    newLeft = Math.max(0, Math.min(newLeft, videoContainer.offsetWidth - webcamFeed.offsetWidth));
    newTop = Math.max(0, Math.min(newTop, videoContainer.offsetHeight - webcamFeed.offsetHeight));
    
    webcamFeed.style.left = newLeft + 'px';
    webcamFeed.style.top = newTop + 'px';
    
    e.preventDefault();
}

function stopDragging() {
    isDragging = false;
}

function playVideo() {
    if (player && player.playVideo) {
        player.playVideo();
    }
}

function pauseVideo() {
    if (player && player.pauseVideo) {
        player.pauseVideo();
    }
}

function stopVideo() {
    if (player && player.stopVideo) {
        player.stopVideo();
    }
}

function loadNewVideo() {
    const videoIdInput = document.getElementById('video-id-input');
    const newVideoId = videoIdInput.value.trim();
    if (newVideoId && player && player.loadVideoById) {
        player.loadVideoById(newVideoId);
    } else {
        console.error('Invalid video ID or player not ready');
    }
}

function toggleMirror() {
    isMirrored = !isMirrored;
    applyWebcamTransform();
}

function changePlaybackSpeed() {
    const speedSlider = document.getElementById('playback-speed');
    const speedValue = document.getElementById('speed-value');
    const newSpeed = parseFloat(speedSlider.value);
    if (player && player.setPlaybackRate) {
        player.setPlaybackRate(newSpeed);
        speedValue.textContent = newSpeed + 'x';
    }
}

function changeOpacity() {
    const opacityControl = document.getElementById('opacity-control');
    const opacityValue = document.getElementById('opacity-value');
    const webcamFeed = document.getElementById('webcam-feed');
    const newOpacity = parseFloat(opacityControl.value);
    
    webcamFeed.style.opacity = newOpacity;
    opacityValue.textContent = Math.round(newOpacity * 100) + '%';
}

function changeYouTubeScale() {
    const youtubeScale = document.getElementById('youtube-scale');
    const youtubeScaleValue = document.getElementById('youtube-scale-value');
    const youtubePlayer = document.getElementById('youtube-player');
    const newScale = parseFloat(youtubeScale.value);
    
    youtubePlayer.style.transform = `scale(${newScale})`;
    youtubeScaleValue.textContent = Math.round(newScale * 100) + '%';
}

function changeWebcamScale() {
    const webcamScale = document.getElementById('webcam-scale');
    const webcamScaleValue = document.getElementById('webcam-scale-value');
    const newScale = parseFloat(webcamScale.value);
    
    webcamScaleValue.textContent = Math.round(newScale * 100) + '%';
    applyWebcamTransform();
}

function applyWebcamTransform() {
    const webcamFeed = document.getElementById('webcam-feed');
    const webcamScale = document.getElementById('webcam-scale');
    const newScale = parseFloat(webcamScale.value);
    
    webcamFeed.style.transform = `scale(${newScale})${isMirrored ? ' scaleX(-1)' : ''}`;
}

function initializeWebcam() {
    navigator.mediaDevices.getUserMedia({ video: true })
        .then(stream => {
            const videoElement = document.getElementById('webcam-feed');
            videoElement.srcObject = stream;
            
            // Set initial opacity
            const opacityControl = document.getElementById('opacity-control');
            const opacityValue = document.getElementById('opacity-value');
            videoElement.style.opacity = opacityControl.value;
            opacityValue.textContent = Math.round(opacityControl.value * 100) + '%';

            // Set initial position
            videoElement.style.left = '10px';
            videoElement.style.top = '10px';
        })
        .catch(error => console.error('Error accessing webcam:', error));
}

function toggleFullscreen() {
    const appContainer = document.querySelector('.app-container');
    const videoContainer = document.getElementById('video-container');
    
    if (!isFullscreen) {
        if (videoContainer.requestFullscreen) {
            videoContainer.requestFullscreen();
        } else if (videoContainer.mozRequestFullScreen) { // Firefox
            videoContainer.mozRequestFullScreen();
        } else if (videoContainer.webkitRequestFullscreen) { // Chrome, Safari and Opera
            videoContainer.webkitRequestFullscreen();
        } else if (videoContainer.msRequestFullscreen) { // IE/Edge
            videoContainer.msRequestFullscreen();
        }
        appContainer.classList.add('fullscreen');
    } else {
        if (document.exitFullscreen) {
            document.exitFullscreen();
        } else if (document.mozCancelFullScreen) { // Firefox
            document.mozCancelFullScreen();
        } else if (document.webkitExitFullscreen) { // Chrome, Safari and Opera
            document.webkitExitFullscreen();
        } else if (document.msExitFullscreen) { // IE/Edge
            document.msExitFullscreen();
        }
        appContainer.classList.remove('fullscreen');
    }
    
    isFullscreen = !isFullscreen;
    // Adjust player size for fullscreen
    setTimeout(() => {
        player.setSize(videoContainer.offsetWidth, videoContainer.offsetHeight);
    }, 100);
}

// Add event listeners
document.getElementById('playback-speed').addEventListener('input', changePlaybackSpeed);
document.getElementById('opacity-control').addEventListener('input', changeOpacity);
document.getElementById('youtube-scale').addEventListener('input', changeYouTubeScale);
document.getElementById('webcam-scale').addEventListener('input', changeWebcamScale);

// Fullscreen change listener
document.addEventListener('fullscreenchange', handleFullscreenChange);
document.addEventListener('webkitfullscreenchange', handleFullscreenChange);
document.addEventListener('mozfullscreenchange', handleFullscreenChange);
document.addEventListener('MSFullscreenChange', handleFullscreenChange);

function handleFullscreenChange() {
    const appContainer = document.querySelector('.app-container');
    const videoContainer = document.getElementById('video-container');
    
    if (document.fullscreenElement || document.webkitFullscreenElement || document.mozFullScreenElement || document.msFullscreenElement) {
        appContainer.classList.add('fullscreen');
        isFullscreen = true;
    } else {
        appContainer.classList.remove('fullscreen');
        isFullscreen = false;
    }
    
    // Adjust player size after fullscreen change
    setTimeout(() => {
        player.setSize(videoContainer.offsetWidth, videoContainer.offsetHeight);
    }, 100);
}

---
Relative Path: ./scripts/output/snapshot.txt
---
---
Relative Path: ./index.html
---
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <link rel="stylesheet" href="css/styles.css">
    <title>Webcam Yoyo App</title>
</head>
<body>
    <div class="app-container">
        <div class="video-container" id="video-container">
            <div id="youtube-player-container">
                <div id="youtube-player"></div>
            </div>
            <div id="webcam-container">
                <video id="webcam-feed" autoplay></video>
            </div>
        </div>
        <div class="controls">
            <div class="video-controls">
                <button onclick="playVideo()">Play</button>
                <button onclick="pauseVideo()">Pause</button>
                <button onclick="stopVideo()">Stop</button>
                <input type="text" id="video-id-input" placeholder="Enter YouTube Video ID">
                <button onclick="loadNewVideo()">Load Video</button>
                <button onclick="toggleFullscreen()">Fullscreen</button>
            </div>
            <div class="webcam-controls">
                <button onclick="toggleMirror()">Mirror Webcam</button>
                <label for="opacity-control">Opacity:</label>
                <input type="range" id="opacity-control" min="0" max="1" step="0.1" value="0.5" onchange="changeOpacity()">
                <span id="opacity-value">50%</span>
            </div>
            <div class="scale-controls">
                <label for="youtube-scale">YouTube Scale:</label>
                <input type="range" id="youtube-scale" min="0.5" max="2" step="0.1" value="1" onchange="changeYouTubeScale()">
                <span id="youtube-scale-value">100%</span>
                <label for="webcam-scale">Webcam Scale:</label>
                <input type="range" id="webcam-scale" min="0.5" max="2" step="0.1" value="1" onchange="changeWebcamScale()">
                <span id="webcam-scale-value">100%</span>
            </div>
            <div class="playback-controls">
                <label for="playback-speed">Playback Speed:</label>
                <input type="range" id="playback-speed" min="0.25" max="2" step="0.25" value="1" onchange="changePlaybackSpeed()">
                <span id="speed-value">1x</span>
            </div>
        </div>
    </div>
    <script src="https://www.youtube.com/iframe_api"></script>
    <script src="js/script.js"></script>
</body>
</html>

---
Relative Path: ./README.md
---
# Webcam Yoyo App

## Project Description
This project is a webcam application that allows users to overlay their webcam feed on a YouTube video to practice yoyo tricks. The app provides features such as webcam mirroring, video playback controls, and resizing capabilities. Users can adjust the position and size of their webcam feed over the YouTube video, enabling them to compare their hand positions with the yoyo tricks demonstrated in the video.

## Key Features
- YouTube video embedding with playback controls
- Webcam feed overlay
- Mirroring toggle for webcam feed
- Adjustable webcam feed size and position
- Video playback speed control
- Frame-by-frame navigation
- Cross-device compatibility (including iPads)

## Milestones
1. **Project Setup**
   - Create necessary folders and initial files
   - Set up version control (Git)

2. **Basic Structure Implementation**
   - Implement HTML structure
   - Create responsive CSS layout
   - Set up JavaScript file with basic functionality

3. **YouTube Video Integration**
   - Integrate YouTube Player API
   - Implement video loading and basic playback controls

4. **Webcam Access and Overlay**
   - Implement webcam access using WebRTC
   - Create overlay of webcam feed on YouTube video

5. **Advanced Video Controls**
   - Add play, pause, and stop functionality
   - Implement playback speed control
   - Add frame-by-frame navigation

6. **Webcam Feed Manipulation**
   - Implement mirroring toggle for webcam feed
   - Add resize functionality for webcam feed
   - Enable drag-and-drop repositioning of webcam feed

7. **User Interface Enhancement**
   - Design and implement an intuitive UI for all controls
   - Ensure responsive design for various screen sizes

8. **Cross-device Compatibility**
   - Test and optimize for different browsers
   - Ensure functionality on tablets, especially iPads
   - Implement touch-friendly controls for mobile devices

9. **Performance Optimization**
   - Optimize code for smooth performance
   - Implement lazy loading and other performance best practices

10. **Testing and Debugging**
    - Conduct thorough testing on various devices and browsers
    - Debug any issues that arise during testing

11. **Documentation and Deployment**
    - Complete project documentation
    - Deploy the application to a web hosting platform
    - Prepare user guide or instructions for using the app



---
Relative Path: ./css/styles.css
---
body {
    font-family: Arial, sans-serif;
    display: flex;
    justify-content: center;
    align-items: center;
    height: 100vh;
    margin: 0;
    background-color: #f0f0f0;
}

.app-container {
    display: flex;
    flex-direction: column;
    align-items: center;
    background-color: white;
    padding: 20px;
    border-radius: 10px;
    box-shadow: 0 0 10px rgba(0,0,0,0.1);
    max-width: 95vw;
}

.video-container {
    position: relative;
    width: 1280px;
    height: 720px;
    margin-bottom: 20px;
    overflow: hidden;
}

#youtube-player-container {
    position: absolute;
    top: 0;
    left: 0;
    width: 100%;
    height: 100%;
    z-index: 1;
}

#youtube-player {
    width: 100%;
    height: 100%;
}

#webcam-container {
    position: absolute;
    top: 0;
    left: 0;
    width: 100%;
    height: 100%;
    z-index: 2;
    pointer-events: none;
}

#webcam-feed {
    position: absolute;
    top: 0;
    left: 0;
    width: 320px;
    height: 180px;
    object-fit: cover;
    border: 2px solid #333;
    border-radius: 5px;
    cursor: move;
    pointer-events: auto;
}

.controls {
    display: flex;
    flex-direction: column;
    align-items: center;
    width: 100%;
}

.video-controls, .webcam-controls, .scale-controls, .playback-controls {
    margin-bottom: 10px;
    display: flex;
    align-items: center;
    flex-wrap: wrap;
    justify-content: center;
}

button {
    padding: 8px 16px;
    margin: 0 5px;
    background-color: #4CAF50;
    color: white;
    border: none;
    border-radius: 4px;
    cursor: pointer;
    transition: background-color 0.3s;
}

button:hover {
    background-color: #45a049;
}

input[type="text"] {
    padding: 8px;
    margin: 0 5px;
    border: 1px solid #ddd;
    border-radius: 4px;
}

input[type="range"] {
    width: 150px;
    margin: 0 10px;
}

label, span {
    margin: 0 5px;
}

.app-container.fullscreen {
    position: fixed;
    top: 0;
    left: 0;
    width: 100vw;
    height: 100vh;
    max-width: 100vw;
    padding: 0;
    border-radius: 0;
    background-color: black;
}

.app-container.fullscreen .video-container {
    width: 100vw;
    height: calc(100vh - 150px);
    margin-bottom: 0;
}

.app-container.fullscreen .controls {
    position: absolute;
    bottom: 0;
    left: 0;
    width: 100%;
    background-color: rgba(0, 0, 0, 0.7);
    padding: 10px 0;
}

@media (max-width: 1280px) {
    .video-container {
        width: 90vw;
        height: calc(90vw * 9 / 16);
    }
}

@media (max-width: 768px) {
    .controls {
        flex-direction: column;
    }

    button, input[type="text"], input[type="range"] {
        margin: 5px 0;
    }
}

---
Relative Path: ./js/script.js
---
let player;
let isMirrored = false;
let isDragging = false;
let startX, startY, startLeft, startTop;
let isFullscreen = false;

function onYouTubeIframeAPIReady() {
    player = new YT.Player('youtube-player', {
        height: '720',
        width: '1280',
        videoId: 'dQw4w9WgXcQ', // Example video ID
        playerVars: {'autoplay': 0, 'controls': 1},
        events: {
            'onReady': onPlayerReady
        }
    });
}

function onPlayerReady(event) {
    console.log('YouTube player is ready');
    setupWebcamDragging();
    initializeWebcam();
}

function setupWebcamDragging() {
    const webcamFeed = document.getElementById('webcam-feed');
    
    webcamFeed.addEventListener('mousedown', startDragging);
    document.addEventListener('mousemove', drag);
    document.addEventListener('mouseup', stopDragging);
    
    // Touch events for mobile devices
    webcamFeed.addEventListener('touchstart', startDragging);
    document.addEventListener('touchmove', drag);
    document.addEventListener('touchend', stopDragging);
}

function startDragging(e) {
    isDragging = true;
    const webcamFeed = document.getElementById('webcam-feed');
    
    if (e.type === 'touchstart') {
        startX = e.touches[0].clientX;
        startY = e.touches[0].clientY;
    } else {
        startX = e.clientX;
        startY = e.clientY;
    }
    
    startLeft = parseInt(webcamFeed.style.left) || 0;
    startTop = parseInt(webcamFeed.style.top) || 0;
    
    e.preventDefault();
}

function drag(e) {
    if (!isDragging) return;
    
    const webcamFeed = document.getElementById('webcam-feed');
    const videoContainer = document.querySelector('.video-container');
    let clientX, clientY;
    
    if (e.type === 'touchmove') {
        clientX = e.touches[0].clientX;
        clientY = e.touches[0].clientY;
    } else {
        clientX = e.clientX;
        clientY = e.clientY;
    }
    
    let newLeft = startLeft + clientX - startX;
    let newTop = startTop + clientY - startY;
    
    // Constrain within video container
    newLeft = Math.max(0, Math.min(newLeft, videoContainer.offsetWidth - webcamFeed.offsetWidth));
    newTop = Math.max(0, Math.min(newTop, videoContainer.offsetHeight - webcamFeed.offsetHeight));
    
    webcamFeed.style.left = newLeft + 'px';
    webcamFeed.style.top = newTop + 'px';
    
    e.preventDefault();
}

function stopDragging() {
    isDragging = false;
}

function playVideo() {
    if (player && player.playVideo) {
        player.playVideo();
    }
}

function pauseVideo() {
    if (player && player.pauseVideo) {
        player.pauseVideo();
    }
}

function stopVideo() {
    if (player && player.stopVideo) {
        player.stopVideo();
    }
}

function loadNewVideo() {
    const videoIdInput = document.getElementById('video-id-input');
    const newVideoId = videoIdInput.value.trim();
    if (newVideoId && player && player.loadVideoById) {
        player.loadVideoById(newVideoId);
    } else {
        console.error('Invalid video ID or player not ready');
    }
}

function toggleMirror() {
    isMirrored = !isMirrored;
    applyWebcamTransform();
}

function changePlaybackSpeed() {
    const speedSlider = document.getElementById('playback-speed');
    const speedValue = document.getElementById('speed-value');
    const newSpeed = parseFloat(speedSlider.value);
    if (player && player.setPlaybackRate) {
        player.setPlaybackRate(newSpeed);
        speedValue.textContent = newSpeed + 'x';
    }
}

function changeOpacity() {
    const opacityControl = document.getElementById('opacity-control');
    const opacityValue = document.getElementById('opacity-value');
    const webcamFeed = document.getElementById('webcam-feed');
    const newOpacity = parseFloat(opacityControl.value);
    
    webcamFeed.style.opacity = newOpacity;
    opacityValue.textContent = Math.round(newOpacity * 100) + '%';
}

function changeYouTubeScale() {
    const youtubeScale = document.getElementById('youtube-scale');
    const youtubeScaleValue = document.getElementById('youtube-scale-value');
    const youtubePlayer = document.getElementById('youtube-player');
    const newScale = parseFloat(youtubeScale.value);
    
    youtubePlayer.style.transform = `scale(${newScale})`;
    youtubeScaleValue.textContent = Math.round(newScale * 100) + '%';
}

function changeWebcamScale() {
    const webcamScale = document.getElementById('webcam-scale');
    const webcamScaleValue = document.getElementById('webcam-scale-value');
    const newScale = parseFloat(webcamScale.value);
    
    webcamScaleValue.textContent = Math.round(newScale * 100) + '%';
    applyWebcamTransform();
}

function applyWebcamTransform() {
    const webcamFeed = document.getElementById('webcam-feed');
    const webcamScale = document.getElementById('webcam-scale');
    const newScale = parseFloat(webcamScale.value);
    
    webcamFeed.style.transform = `scale(${newScale})${isMirrored ? ' scaleX(-1)' : ''}`;
}

function initializeWebcam() {
    navigator.mediaDevices.getUserMedia({ video: true })
        .then(stream => {
            const videoElement = document.getElementById('webcam-feed');
            videoElement.srcObject = stream;
            
            // Set initial opacity
            const opacityControl = document.getElementById('opacity-control');
            const opacityValue = document.getElementById('opacity-value');
            videoElement.style.opacity = opacityControl.value;
            opacityValue.textContent = Math.round(opacityControl.value * 100) + '%';

            // Set initial position
            videoElement.style.left = '10px';
            videoElement.style.top = '10px';
        })
        .catch(error => console.error('Error accessing webcam:', error));
}

function toggleFullscreen() {
    const appContainer = document.querySelector('.app-container');
    const videoContainer = document.getElementById('video-container');
    
    if (!isFullscreen) {
        if (videoContainer.requestFullscreen) {
            videoContainer.requestFullscreen();
        } else if (videoContainer.mozRequestFullScreen) { // Firefox
            videoContainer.mozRequestFullScreen();
        } else if (videoContainer.webkitRequestFullscreen) { // Chrome, Safari and Opera
            videoContainer.webkitRequestFullscreen();
        } else if (videoContainer.msRequestFullscreen) { // IE/Edge
            videoContainer.msRequestFullscreen();
        }
        appContainer.classList.add('fullscreen');
    } else {
        if (document.exitFullscreen) {
            document.exitFullscreen();
        } else if (document.mozCancelFullScreen) { // Firefox
            document.mozCancelFullScreen();
        } else if (document.webkitExitFullscreen) { // Chrome, Safari and Opera
            document.webkitExitFullscreen();
        } else if (document.msExitFullscreen) { // IE/Edge
            document.msExitFullscreen();
        }
        appContainer.classList.remove('fullscreen');
    }
    
    isFullscreen = !isFullscreen;
    // Adjust player size for fullscreen
    setTimeout(() => {
        player.setSize(videoContainer.offsetWidth, videoContainer.offsetHeight);
    }, 100);
}

// Add event listeners
document.getElementById('playback-speed').addEventListener('input', changePlaybackSpeed);
document.getElementById('opacity-control').addEventListener('input', changeOpacity);
document.getElementById('youtube-scale').addEventListener('input', changeYouTubeScale);
document.getElementById('webcam-scale').addEventListener('input', changeWebcamScale);

// Fullscreen change listener
document.addEventListener('fullscreenchange', handleFullscreenChange);
document.addEventListener('webkitfullscreenchange', handleFullscreenChange);
document.addEventListener('mozfullscreenchange', handleFullscreenChange);
document.addEventListener('MSFullscreenChange', handleFullscreenChange);

function handleFullscreenChange() {
    const appContainer = document.querySelector('.app-container');
    const videoContainer = document.getElementById('video-container');
    
    if (document.fullscreenElement || document.webkitFullscreenElement || document.mozFullScreenElement || document.msFullscreenElement) {
        appContainer.classList.add('fullscreen');
        isFullscreen = true;
    } else {
        appContainer.classList.remove('fullscreen');
        isFullscreen = false;
    }
    
    // Adjust player size after fullscreen change
    setTimeout(() => {
        player.setSize(videoContainer.offsetWidth, videoContainer.offsetHeight);
    }, 100);
}



